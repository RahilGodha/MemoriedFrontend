{"ast":null,"code":"import * as api from '../api';\nimport { FETCH_BY_SEARCH, START_LOADING, END_LOADING, FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_POST } from '../constants/actionTypes';\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    // console.log(data);\n\n    dispatch({\n      type: FETCH_POST,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    // console.log(data);\n\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsbySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {}\n};\nexport const createPost = post => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    console.log(data);\n    // console.log(data);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["api","FETCH_BY_SEARCH","START_LOADING","END_LOADING","FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","FETCH_POST","getPost","id","dispatch","type","data","fetchPost","payload","error","console","log","message","getPosts","page","fetchPosts","getPostsBySearch","searchQuery","fetchPostsbySearch","createPost","post","updatePost","deletePost","likePost"],"sources":["D:/Coding/Projects/my-memories/client/src/actions/posts.js"],"sourcesContent":["import * as api from '../api';\r\nimport { FETCH_BY_SEARCH,START_LOADING, END_LOADING, FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_POST } from '../constants/actionTypes';\r\n\r\n\r\nexport const getPost = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: START_LOADING});\r\n        const { data } = await api.fetchPost(id);\r\n        // console.log(data);\r\n\r\n        dispatch({ type: FETCH_POST, payload: data });\r\n\r\n        dispatch({type:END_LOADING});\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}\r\n\r\nexport const getPosts = (page) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: START_LOADING});\r\n        const { data } = await api.fetchPosts(page);\r\n        // console.log(data);\r\n\r\n        dispatch({ type: FETCH_ALL, payload: data });\r\n\r\n        dispatch({type:END_LOADING});\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}\r\n\r\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: START_LOADING});\r\n        const { data: { data } } = await api.fetchPostsbySearch(searchQuery);\r\n        dispatch({ type: FETCH_BY_SEARCH, payload: data})\r\n        dispatch({type:END_LOADING});\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: START_LOADING});\r\n        const { data } = await api.createPost(post);\r\n        console.log(data);\r\n        // console.log(data);\r\n        dispatch({ type: CREATE, payload: data });\r\n        dispatch({type:END_LOADING});\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.updatePost(id, post);\r\n\r\n\r\n        dispatch({ type: UPDATE, payload: data });\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n    try {\r\n        await api.deletePost(id);\r\n        dispatch({ type: DELETE, payload: id })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const likePost = (id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.likePost(id);\r\n        dispatch({ type: LIKE, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}